# Generated by Django 4.2.7 on 2025-08-15 17:11

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Category name", max_length=100, unique=True
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="URL-friendly version of the name",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Category description"),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="Category image",
                        null=True,
                        upload_to="categories/",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this category is active"
                    ),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(
                        default=0, help_text="Sort order for category display"
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent category for hierarchical organization",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="core.category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Category",
                "verbose_name_plural": "Categories",
                "db_table": "categories",
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(help_text="Tag name", max_length=50, unique=True),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="URL-friendly version of the name",
                        unique=True,
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#007bff",
                        help_text="Hex color code for tag display",
                        max_length=7,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this tag is active"
                    ),
                ),
            ],
            options={
                "verbose_name": "Tag",
                "verbose_name_plural": "Tags",
                "db_table": "tags",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(help_text="Product name", max_length=200)),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="URL-friendly version of the name",
                        max_length=200,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Detailed product description"),
                ),
                (
                    "short_description",
                    models.CharField(
                        blank=True, help_text="Brief product summary", max_length=500
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Product price",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Product cost (for margin calculation)",
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "stock_quantity",
                    models.PositiveIntegerField(
                        default=0, help_text="Available stock quantity"
                    ),
                ),
                (
                    "sku",
                    models.CharField(
                        help_text="Stock Keeping Unit", max_length=50, unique=True
                    ),
                ),
                (
                    "barcode",
                    models.CharField(
                        blank=True, help_text="Product barcode", max_length=50
                    ),
                ),
                (
                    "weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Product weight in kg",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "dimensions",
                    models.CharField(
                        blank=True,
                        help_text="Product dimensions (L x W x H)",
                        max_length=100,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("published", "Published"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        help_text="Product status",
                        max_length=20,
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False, help_text="Whether this product is featured"
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        help_text="Product category",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="products",
                        to="core.category",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this product",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_products",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Product tags for categorization",
                        related_name="products",
                        to="core.tag",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product",
                "verbose_name_plural": "Products",
                "db_table": "products",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "rating",
                    models.PositiveIntegerField(
                        help_text="Rating from 1 to 5 stars",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("title", models.CharField(help_text="Review title", max_length=200)),
                ("content", models.TextField(help_text="Review content")),
                (
                    "is_verified_purchase",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this review is from a verified purchase",
                    ),
                ),
                (
                    "is_approved",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this review is approved for display",
                    ),
                ),
                (
                    "helpful_votes",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of helpful votes"
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="Product being reviewed",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="core.product",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who wrote the review",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Review",
                "verbose_name_plural": "Reviews",
                "db_table": "reviews",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["product", "is_approved"],
                        name="reviews_product_4bb590_idx",
                    ),
                    models.Index(
                        fields=["user", "created_at"], name="reviews_user_id_fc2a09_idx"
                    ),
                ],
                "unique_together": {("product", "user")},
            },
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["status", "is_featured"], name="products_status_a6991e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["category", "status"], name="products_categor_29e98f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["sku"], name="products_sku_fe2039_idx"),
        ),
    ]
