# Docker Compose configuration for development environment
# Includes Django backend, React frontend, PostgreSQL database, and Redis cache

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: mesaifinal_db
    environment:
      POSTGRES_DB: mesaifinal_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    networks:
      - mesaifinal_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mesaifinal_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - mesaifinal_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: mesaifinal_backend
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.development
      - DEBUG=True
      - SECRET_KEY=django-insecure-development-key-change-in-production
      - DB_NAME=mesaifinal_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/1
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,backend
    volumes:
      - ./backend:/app
      - backend_static:/app/staticfiles
      - backend_media:/app/media
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mesaifinal_network
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/docs/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vite React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      args:
        VITE_TELERIK_LICENSE: ${VITE_TELERIK_LICENSE}
    container_name: mesaifinal_frontend
    environment:
      - VITE_API_URL=http://localhost:8000/api/v1
      - NODE_ENV=development
      - VITE_TELERIK_LICENSE=${VITE_TELERIK_LICENSE}
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/index.html:/app/index.html
      - ./frontend/vite.config.ts:/app/vite.config.ts
      - ./frontend/tsconfig.json:/app/tsconfig.json
      - ./frontend/tsconfig.app.json:/app/tsconfig.app.json
      - ./frontend/tsconfig.node.json:/app/tsconfig.node.json 
      - ./frontend/package.json:/app/package.json
      - ./frontend/package-lock.json:/app/package-lock.json
      - ./frontend/.prettierrc:/app/.prettierrc
      - ./frontend/eslint.config.js:/app/eslint.config.js
      - frontend_node_modules:/app/node_modules
    ports:
      - "5173:5173"
    depends_on:
      - backend
    networks:
      - mesaifinal_network
    stdin_open: true
    tty: true

  # Nginx Reverse Proxy (Optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: mesaifinal_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - backend_static:/var/www/static
      - backend_media:/var/www/media
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
    networks:
      - mesaifinal_network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_static:
    driver: local
  backend_media:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  mesaifinal_network:
    driver: bridge
    name: mesaifinal_network

